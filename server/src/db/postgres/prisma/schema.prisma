generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  phoneNumber      String
  dob              DateTime
  address          String
  gender           String
  enrollmentNumber String    @unique
  enrollmentYear   Int

  // Relation to Department
  department       Department @relation(fields: [departmentId], references: [id])
  departmentId     String

  // Relation to Programme & Semester
  programme       Programme   @relation(fields: [programmeId], references: [id])
  programmeId     String
  currentSemester Semester    @relation(fields: [currentSemesterId], references: [id])
  currentSemesterId String

  // Many-to-Many Courses Enrolled
  courses         Course[]    @relation(name: "StudentCourses")
  

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
}

model Employee {
  id                String      @id @default(uuid())
  name              String
  email             String      @unique
  phone             String?      
  // Admin belongs to a Department
  department        Department? @relation(fields: [departmentId], references: [id])
  departmentId      String?

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt @default(now())
  schools School[]
  users Authentication[]

  // Relations for Instructor and Course Advisor
  instructorMappings InstructorMapping[]
  advisorMappings    AdvisorMapping[]
 
}

model Programme {
  id           String    @id @default(uuid())
  name         String
  duration     Int       // Number of years (e.g., 4 for B.Tech)
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  semesters    Semester[]
  students Student[]
  advisors AdvisorMapping[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
} 

model Course {
  id           String    @id @default(uuid())
  name         String
  code         String    @unique
  credits      Int
  description  String?

  // Relation to Department
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId String

  // Relation to Semester
  semester     Semester?   @relation(fields: [semesterId], references: [id])
  semesterId   String?

  // Many-to-Many with Students
  students     Student[]   @relation(name: "StudentCourses")

  // Many-to-Many with Instructors
  instructors  InstructorMapping[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt @default(now())
}

model InstructorMapping {
  id            String    @id @default(uuid())
  instructor    Employee  @relation(fields: [instructorId], references: [id])
  instructorId  String

  course        Course    @relation(fields: [courseId], references: [id])
  courseId      String

  createdAt     DateTime  @default(now())
}

model AdvisorMapping {
  id            String    @id @default(uuid())
  advisor       Employee  @relation(fields: [advisorId], references: [id])
  advisorId     String

  programme     Programme @relation(fields: [programmeId], references: [id])
  programmeId   String

  semester      Semester  @relation(fields: [semesterId], references: [id])
  semesterId    String

  createdAt     DateTime  @default(now())
}

model Department {
  id           String      @id @default(uuid())
  name         String

  school       School      @relation(fields: [schoolId], references: [id])
  schoolId     String

  students     Student[]
  courses      Course[]
  programmes   Programme[]
  employee Employee[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model School {
  id           String      @id @default(uuid())
  name         String
  dean         Employee? @relation(fields: [deanId], references: [id])
  deanId       String?

  departments  Department[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model Semester {
  id           String      @id @default(uuid())
  name         String
  startDate    DateTime
  endDate      DateTime

  programme    Programme @relation(fields: [programmeId], references: [id])
  programmeId  String

  students     Student[]
  courses      Course[]
  advisors    AdvisorMapping[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

enum Role {
  STUDENT
  ADMIN
  ADVISOR
  INSTRUCTOR
}

model Authentication {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?
  roles    RoleAssignment[]
  employee Employee? @relation(fields:[employeeId], references: [id], onDelete: Cascade)
  employeeId String?
}

model RoleAssignment {
  id     String @id @default(uuid())
  user   Authentication @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role
}
